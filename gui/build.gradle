plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.openjfx.javafxplugin' version '0.0.14'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.10'
}

repositories {
    mavenCentral()
    maven { url 'https://kotlin.bintray.com/kotlinx' }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        apiVersion = "1.9"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        apiVersion = "1.9"
    }
}

javafx {
    version = "20"
    modules = ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.fxml', 'javafx.web', 'javafx.swing']
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation project(':array')
    implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.11.0'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.16.1'
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json', version: '1.5.1'
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.2'
    implementation group: 'com.panemu', name: 'tiwulfx-dock', version: '0.2'
}

run {
    jvmArgs = [
            "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED",
            "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
            "--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED",
            "--add-exports=javafx.base/com.sun.javafx.collections=ALL-UNNAMED",
            "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior.TableViewBehavior=ALL-UNNAMED",
            "--add-exports=javafx.base/com.sun.javafx.event.EventHandlerManager=ALL-UNNAMED",
            "--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED",

            "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls",
            "--add-exports=javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls",
            "--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls",
            "--add-exports=javafx.base/com.sun.javafx.collections=org.controlsfx.controls",
            "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior.TableViewBehavior=org.controlsfx.controls",
            "--add-exports=javafx.base/com.sun.javafx.event.EventHandlerManager=org.controlsfx.controls",
            "--add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls"
    ]
}

//task createStartScripts(type: CreateStartScripts) {
//    println("template: ${unixStartScriptGenerator.template}")
//    def zz = resources.text.fromFile('xcustomUnixStartScript.txt')
//    println("resource: ${zz}")
//    assert project.file(zz).exists()
//    println("exists: ${project.file(zz).exists()}")
//    unixStartScriptGenerator.template = resources.text.fromFile('xcustomUnixStartScript.txt')
//    windowsStartScriptGenerator.template = resources.text.fromFile('xcustomWindowsStartScript.txt')
//}

startScripts {
    def unixGen = unixStartScriptGenerator
    unixGen.template = resources.text.fromString(
            unixGen.template.asString().replaceFirst('(?=\nDEFAULT_JVM_OPTS=.*?\n)') {
                '\nJAVA_OPTS="\\$JAVA_OPTS -Dkap.installPath=\\$APP_HOME"'
            })

    def winGen = windowsStartScriptGenerator
    winGen.template = resources.text.fromString(
            winGen.template.asString().replaceFirst('%> -classpath') {
                '%> -Dkap.installPath="%APP_HOME%" -classpath'
            })

    applicationName = 'kap-jvm'
}

distributions {
    main {
        contents {
            from('../array/standard-lib') {
                into 'standard-lib'
            }
        }
    }
}

mainClassName = 'array.gui.Client'
