import java.nio.charset.StandardCharsets

static def executeAndGetOutput(String... command) {
    Process p = new ProcessBuilder().command(command).start()
    def input = new BufferedReader(new InputStreamReader(p.getInputStream(), StandardCharsets.UTF_8))
    def buf = new StringBuilder()
    String s
    while ((s = input.readLine()) != null) {
        buf.append(s)
        buf.append("\n")
    }
    int result = p.waitFor()
    if (result == 0) {
        return buf.toString()
    } else {
        return null
    }
}

static def executeAndCleanup(String... args) {
    def output = executeAndGetOutput(args)
    if (output == null) {
        return null
    }
    return output.trim()
}

static def findIcuIncludes() {
    def args = new ArrayList<String>()
    def includeOutput = executeAndCleanup("pkg-config", "icu-i18n", "--variable=includedir")
    if (includeOutput == null) {
        args.add("-I/usr/include")
    } else {
        includeOutput.split(" ").each { v ->
            args.add("-I" + v)
        }
    }
    def argsString = args.join(" ")
    def result = executeAndCleanup("pkg-config", "icu-i18n", "--cflags")
    if (result != null) {
        return argsString
    } else {
        return argsString + " " + result
    }
}

static def findIcuLibs() {
    def args = new ArrayList<String>()
    def libdirOutput = executeAndCleanup("pkg-config", "icu-i18n", "--variable=libdir")
    if (libdirOutput == null) {
        args.add("-L/usr/lib")
    } else {
        libdirOutput.split(" ").each { v ->
            args.add("-L" + v)
        }
    }
    def argsString = args.join(" ")
    def result = executeAndCleanup("pkg-config", "icu-i18n", "--libs")
    if (result == "") {
        return argsString
    } else {
        return argsString + " " + result
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform'
}

repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://kotlin.bintray.com/kotlinx' }
}

kotlin {
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64

    jvm() {
        compilations.main.kotlinOptions {
            jvmTarget = "11"
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
            useIR = true
        }
        compilations.test.kotlinOptions {
            jvmTarget = "11"
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
            useIR = true
        }
    }
    js {
//        browser {
//            testTask {
//                useKarma {
//                    useFirefox()
//                    useChrome()
//                    useSafari()
//                }
//            }
//        }
        nodejs {
        }
    }
    linuxX64("linux") {
        compilations.main.cinterops {
            icu
            libcurl
            jansson
        }
        compilations.main.kotlinOptions {
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        }
        compilations.test.kotlinOptions {
//            freeCompilerArgs = ["-linker-options", findIcuLibs()]
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin('stdlib')
                implementation kotlin('reflect')
                implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.4")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.apache.poi:poi-ooxml:4.1.2"
                implementation 'com.google.code.gson:gson:2.8.6'
                implementation 'org.apache.derby:derby:10.15.2.0'
                implementation 'org.xerial:sqlite-jdbc:3.34.0'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation npm('xregexp', '4.4.1')
                implementation npm('grapheme-splitter', '1.0.4')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        linuxMain {
        }
        linuxTest {
        }
        all {
            languageSettings.enableLanguageFeature("InlineClasses")
            languageSettings.useExperimentalAnnotation("kotlin.RequiresOptIn")
        }
        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
        // in gradle.properties file and re-import your project in IDE.
    }
}

// Use the following Gradle tasks to run your application:
// :runReleaseExecutableLinux - without debug symbols
// :runDebugExecutableLinux - with debug symbols
