namespace("kap")

defsyntax if (:value cond :nfunction thenStatement :optional (:constant else :nfunction elseStatement)) {
  ⍞(((cond ≡ 1) ∨ ((1=≢cond) ∧ (↑cond) ≡ 1)) ⌷ (⍞((isLocallyBound 'elseStatement) ⌷ λ{λ{⍬}} λ{elseStatement}) ⍬) thenStatement) cond
}

declare(:export (if else))

defsyntax while (:nexprfunction cond :nfunction body) {
  {if (⍞cond 0) { ⍞body 0 ◊ 0 } else { 1 }} ⍣ {⍵} 0
}

declare(:export while)

defsyntax unwindProtect (:function statement :function handler) {
  int:unwindProtect statement handler
}

declare(:export unwindProtect)

declare(:singleCharExported "⊇")

∇ (A) ⊇ (B) {
  {(⊂⍵)⊃B}¨A
}

declare(:export ⊇)