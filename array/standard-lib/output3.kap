namespace("o3")

⍝ ┌┌┌→──┐
⍝ ↓↓↓0 1│
⍝ │││2 3│
⍝ ││├→──┤
⍝ ││↓4 5│
⍝ │││6 7│
⍝ │├├→──┤
⍝ │↓↓0 1│
⍝ │││2 3│
⍝ ││├→──┤
⍝ ││↓4 5│
⍝ │││6 7│
⍝ └└└───┘

isArray ⇐ 'array≡typeof
isChar ⇐ 'char≡typeof
isSymbol ⇐ 'symbol≡typeof

isNumber ⇐ { (typeof ⍵) ∊ 'integer 'float 'complex 'rational }

⍝ Replace 0 with a space in the input array
zSpc ⇐ { (0≡¨⍵) % ⍵ @\s }

∇ isAplString (v) {
  1=≢⍴v and ~0∊'char=typeof¨v
}

∇ isEnclosedArray {
  0=≢⍴⍵ and ⍵≢⊃⍵
}

∇ toHex {
  "0123456789ABCDEF" ⊇⍨ {⍵ ⫽⍨ ~×\0=⍵} (6 ⍴ 16) ⊤ ⍵
}

∇ renderChar ch {
  n ← ch-@\0
  ch ← if ((n ≥ 33) and (n ≤ 126)) {
    @@ , ch
  } else {
    "@\\u" , toHex n
  }
  <ch
}

∇ renderString {
  zSpc ⊃ (@\n≠)⍛⊂ @",⍵,@"
}

∇ renderString2 {
  (@\n≠)⍛⊂ @",⍵,@"
}

∇ renderNumber (n) {
  <⍕n
}

∇ renderSymbol (sym) {
  <⍕sym
}

∇ renderArray v0 {
  q ← ¯1 (↑⌽⍴v0) ⍴ v0
  colWidths ← ⌈⌿ (↑↓⍴)¨ q
  rowHeights ← ⌈/ ≢¨ q
  ⍝ Pad each cell with spaces to align the sizes
  aligned ← (rowHeights ,⌻ -1+colWidths) (zSpc↑)¨ q
  ⍝ Concatenate the cells, add the right border and drop the leading space
  f ← (⍪/,/(¯1 , (¯2↑1,⍴v0)) ⍴ aligned) (0 1↓,)¨ @│

  w ← ↑↓⍴↑f

  top ← < "→" , ((w-2) ⍴ @─) ,"┐"
  bottom ← < ((w-1) ⍴ @─) ,"┘"
  separator ← < "→" , ((w-2) ⍴ @─) , "┤"
  res ← {top⍪⍵⍪bottom} ↑ ⍪⌿⍪ ¯1↓ , f ,[0.5] ⊂separator


  ⍝ To draw the layers to the left, first determine the number of layers and their sizes.
  ds ← ¯2↓⍴v0

  ⍝ Compute the number of layer indicators for each layer
  layerPos ← ⌽1,×\ds

  makeVerticalLayer ⇐ {
    ⍝ Split content in groups of size ⍵, and compute height of each group
    sizes ← +/≢¨ ¯1 ⍵ ⍴ f
    ⍝ Create a sequence of vertical bars according to the sizes,
    ⍝ and end with a split symbol. Finally remove the last instance.
    coverage ← ⍵-1
    vertArrow ← ⍺ ⌷ "│↓"
    centre ← ¯1↓↑,/ {( vertArrow , (⍵+coverage-1) ⍴ @│) , @├}¨ sizes
    ⍪ ↑ ,/ @┌ , centre , @└
  }

  verticalAxisIndicator ← ((0⌈¯1+≢layerPos) ⍴ 0) , (1≠≢⍴v0)
  (↑,/ verticalAxisIndicator makeVerticalLayer¨ layerPos) , res
}

singleLineSyms ← "┌┐└┘─│"
doubleLineSyms ← "╔╗╚╝═║"

withBorder ⇐ {
  nCols ← ↑↓⍴⍵
  (1 nCols 1 ⫽ 0 4 1 ⊇ ⍺) ⍪ (⍺[5] , ⍵ , ⍺[5]) ⍪ (1 nCols 1 ⫽ 2 4 3 ⊇ ⍺)
}

renderEmpty ⇐ {
  2 3 ⍴ "┌⊖┐└─┘"
}

format ⇐ { throw "Forward declaration" }

renderArrayOrString ⇐ {
  v←⍵
  when {
    ((,0)≡⍴v)           { 1 1 ⍴ "⍬" }
    (0=×/⍴v)            { renderEmpty v }
    (isAplString v)     { renderString v }
    (isEnclosedArray v) { singleLineSyms withBorder format ⊃v }
    (1)                 { renderArray format ¨v }
  }
}

∇ renderMap {
  < "[map size:",(⍕mapSize ⍵),"]"
}

renderList ⇐ {
  aligned ← { alignCells ¯1 (↑⌽⍴⍵) ⍴ ⍵ } format¨ fromList ⍵
  ⍝ Height of the first cell (all cells have the same height)
  h ← ↑⍴↑aligned
  withSeparators ← @║ , (⊃,/ ¯1↓ , (⍉aligned) , ⊂⍪ h ⍴ @│) , @║
  top ← @╔ , (↑,/ ¯1↓ ,(⍉ (@═ ⍴⍨ ↑⌽⍴)¨ aligned) , @╤) , @╗
  bottom ← @╚ , (↑,/ ¯1↓ ,(⍉ (@═ ⍴⍨ ↑⌽⍴)¨ aligned) , @╧) , @╝
  top ⍪ withSeparators ⍪ bottom
} 

typeToFormatter ← map `
        'integer  λrenderNumber `
        'float    λrenderNumber `
        'complex  λrenderNumber `
        'rational λrenderNumber `
        'array    λrenderArrayOrString `
        'char     λrenderChar `
        'symbol   λrenderSymbol `
        'map      λrenderMap `
        'list     λrenderList

format ⇐ {
  v←⍵
  renderer ← typeToFormatter[typeof v]
  ⍞((⍬≡renderer) ⌷ renderer λ{<⍕typeof ⍵}) v
}

'kap:renderer sysparam λformat
