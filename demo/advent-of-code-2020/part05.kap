⍝ This problem is easily solved once one realises that the string is simply
⍝ a binary number, where the letters B and R represents 1.
⍝
⍝ Thus, both solutions first read all the lines into a an array, and then
⍝ decodes the number like this:
⍝
⍝  ⍵∊"BR"
⍝
⍝  creates a boolean array with 1's where the character is
⍝  a member of any character in the string.
⍝
⍝  2⊥ is then applied on the result, which encodes the binary array into
⍝  a number.
⍝
⍝  Finally, ⌈/ finds the maximum value.

∇ solveDay5part1 (file) {
    ⌈/ {2⊥⍵∊"BR"}¨ io:read file
}

⍝ The first part of this solution is similar to part1. The list of numbers
⍝ is then sorted. The sort function is an idiom and can be thought of as
⍝ single function that simply sorts its argument.
⍝
⍝ 2-/⍵ will subtract pairs of values, and generate an array with the
⍝ differences. Since the array is sorted, we're looking for the position
⍝ of the value -2 in this array, which is found using ¯2 ⍳⍨
⍝
⍝ The value from the sorted array at this index is looked up, and 1 is added
⍝ to the found value which gives us the result.

∇ solveDay5part2 (file) {
    {1+⍵[¯2 ⍳⍨ 2-/⍵]} ⍋⍛⊇ {2⊥⍵∊"BR"}¨ io:read file
}
